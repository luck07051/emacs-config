#+TITLE: Org Mode Config
#+AUTHOR: uima
#+DESCRIPTION: Config for Org Mode

* TOC                                                                   :TOC:
- [[#keybind][Keybind]]
- [[#org-roam][Org Roam]]
- [[#agenda][Agenda]]
- [[#tags][Tags]]
- [[#keyword][Keyword]]
- [[#capture-templete][Capture Templete]]
- [[#auto-insert-metadata][Auto Insert Metadata]]
  - [[#auto-insert][Auto Insert]]
  - [[#get-title-function][Get Title Function]]
- [[#display-inline-images][Display Inline Images]]
- [[#indent-mode][Indent Mode]]
- [[#fix-wired-indent][Fix Wired Indent]]
- [[#src-block][Src Block]]
- [[#toc][Toc]]
- [[#hide-elements][Hide Elements]]
- [[#show-hidden-element][Show Hidden Element]]
- [[#babel][Babel]]
- [[#insert-links-with-title][Insert Links with Title]]
- [[#export][Export]]
- [[#archive-doned-to-do-list][Archive Doned To-do list]]
- [[#automatically-done-when-all-children-are-done][Automatically DONE When All Children Are Done]]

* Keybind
#+begin_src emacs-lisp
(evil-define-key '(normal visual) org-mode-map
  (kbd "<leader>om") 'org-header-skeleton  ;; insert metadata
  (kbd "<leader>oi") 'org-toggle-inline-images
  )

(evil-define-key nil 'global
  (kbd "C-c l")      'org-store-link
  (kbd "C-c i")      'org-cliplink  ;; paste link with title
  (kbd "C-c a")      'org-agenda
  (kbd "C-c c")      'org-capture
  (kbd "C-c s")      'org-edit-src-code
  )
#+end_src

* Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory (file-truename "~/org"))
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template
   (concat "${title:*} " (propertize "${tags:15}" 'face 'org-tag)))
  (org-roam-capture-templates
   '(("d" "default" plain "\n%?"
      :target (file+head
               "%<%Y%m%d%H%M%S>-${slug}.org"
               "#+title: ${title}\n#+data: %U\n#+filetags:\n")
      :unnarrowed t)
     ))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         :map org-mode-map
         ("C-M-i"   . completion-at-point))
  :config
  (org-roam-setup))
#+end_src

* Agenda
#+begin_src emacs-lisp
;;(setq org-agenda-files '("~/org"))
(setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
#+end_src

* Tags
#+begin_src emacs-lisp
(setq org-tag-alist '(
                      (:startgroup . nil)
                      (:endgroup . nil)
                      ))

(setq org-tag-faces
      '(
        ;;("meeting"   . (:foreground "yellow1"       :weight bold))
        ))
#+end_src

* Todo Keyword
#+begin_src emacs-lisp
(setq org-todo-keywords
      ;;'((sequence "TODO" "WAITING" "|" "DONE")))
      '((sequence "TODO(t)" "IN-PROGRESS(i!)" "WAITING(w@)" "|" "DONE(d)")))

(setq org-log-done 'time)

(setq org-todo-keyword-faces
      '(
        ("TODO"        . (:foreground "GoldenRod"  :weight bold))
        ("IN-PROGRESS" . (:foreground "Cyan"       :weight bold))
        ("WAITING"     . (:foreground "DarkOrange" :weight bold))
        ("DONE"        . (:foreground "LimeGreen"  :weight bold))
        ))
#+end_src

* Capture Templete
#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("n" "Add Note to Inbox"
         entry (file "~/org/inbox.org")
         "* %?"
         :empty-lines-before 1)
        ("t" "Add Todo to Inbox"
         entry (file "~/org/inbox.org")
         "* TODO [#B] %?\n:CREATED: %T\n"
         :empty-lines-before 1)
        ("l" "Cap with Link")
        ("ln" "Add Note with File Link to Inbox"
         entry (file "~/org/inbox.org")
         "* %?\n%a\n"
         :empty-lines-before 1)
        ("lt" "Add Todo with File Link to Inbox"
         entry (file "~/org/inbox.org")
         "* TODO [#B] %?\n:CREATED: %T\n%a\n"
         :empty-lines-before 1)
        ))
#+end_src

* Auto Insert Metadata
** Auto Insert
#+begin_src emacs-lisp
;; (auto-insert-mode t)
;;
;; (setq user-full-name "uima")
;; (add-to-list 'auto-insert-alist
;;              '(("\\.\\org\\'" . "Auto insert metadata for org.")
;;                "" "#+TITLE: " (get-title-by-file-name) "\n"
;;                "#+AUTHOR: " user-full-name "\n"
;;                "#+DATE: " (format-time-string "%Y-%m-%d") "\n")
;;              )
#+end_src

** Get Title Function
#+begin_src emacs-lisp
(defun get-file-name-without-extension ()
  (file-name-sans-extension
   (file-name-nondirectory
    (buffer-file-name
     (window-buffer
      (minibuffer-selected-window))))))
(defun get-title-by-file-name ()
  (s-titleize
   (subst-char-in-string
    ?- (string-to-char " ") (get-file-name-without-extension))))
#+end_src

* Display Inline Images
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

* Indent Mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

* Fix Wired Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-src-preserve-indentation t)  ;; do not put two spaces on the left
#+end_src

* Src Block
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

* Toc
#+begin_src emacs-lisp
(use-package toc-org :hook (org-mode . toc-org-mode))
#+end_src

* Hide Elements
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

* Show Hidden Element
#+begin_src emacs-lisp
(use-package org-appear
  :init
  (setq org-appear-autolinks 1)
  (setq org-appear-trigger 'manual)
  (add-hook 'org-mode-hook 'org-appear-mode)
  (add-hook 'org-mode-hook (lambda ()
			     (add-hook 'evil-insert-state-entry-hook
				       #'org-appear-manual-start
				       nil
				       t)
			     (add-hook 'evil-insert-state-exit-hook
				       #'org-appear-manual-stop
				       nil
				       t))))
#+end_src

* Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (emacs-lisp . t)
   (shell . t)
   (python . t)
   (awk . t)
   (C . t)
   ))
#+end_src

* Insert Links with Title
#+begin_src emacs-lisp
(use-package org-cliplink)
#+end_src

* TODO Export
[[https://search.uima.duckdns.org/search?q=emacs%20org%20mode%20export%20unable%20resolve%20link&language=auto&time_range=&safesearch=0&categories=general][searching]]

* TODO Archive Doned To-do list
A key press to move doned item to, say `archive.org` file.

* TODO Automatically DONE When All Children Are Done
[[https://orgmode.org/manual/Breaking-Down-Tasks.html#Breaking-Down-Tasks][manual for this]]
