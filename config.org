#+TITLE: Config File
#+AUTHOR: uima
#+DESCRIPTION: The emacs config file
#+STARTUP: showeverything

* TOC                                                                   :TOC:
- [[#custom-function][Custom Function]]
- [[#package-manager][Package Manager]]
- [[#install-important-plug][Install Important Plug]]
  - [[#evil-mode][Evil Mode]]
  - [[#which-key][Which Key]]
  - [[#nerd-icons][Nerd Icons]]
- [[#keybinding][Keybinding]]
  - [[#setup-general][Setup General]]
  - [[#the-keybinding][The keybinding]]
- [[#theme][Theme]]
- [[#ui][UI]]
  - [[#disable-bars][Disable Bars]]
  - [[#number][Number]]
  - [[#line-warp][Line Warp]]
  - [[#show-trailing-space][Show Trailing Space]]
  - [[#scroll-bemaviour][Scroll Bemaviour]]
  - [[#transparency][Transparency]]
- [[#dashboard][Dashboard]]
- [[#org-mode][Org Mode]]
  - [[#tempo][Tempo]]
  - [[#indent][Indent]]
  - [[#header-icons][Header Icons]]
  - [[#toc][Toc]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#others][Others]]
  - [[#dont-create-backup-file][Dont Create Backup file]]
  - [[#remove-trailing-space-when-save][Remove Trailing Space When Save]]
  - [[#smooth-scrolling-and-centering-content][Smooth Scrolling and Centering Content]]

* Custom Function
#+begin_src emacs-lisp
  (defun install-pkg (name) (unless (package-installed-p name) (package-install name)))
#+end_src

* Package Manager
#+begin_src emacs-lisp
  ;; Set up package.el to work with MELPA
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
#+end_src

* Install Important Plug
** Evil Mode
#+begin_src emacs-lisp
  (install-pkg 'evil)
  (install-pkg 'evil-collection)

  ;; Setting
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)

  ;; Enable Evil
  (require 'evil)
  (when (require 'evil-collection nil t)
    (evil-collection-init))
  (evil-mode 1)
#+end_src

** Which Key
#+begin_src emacs-lisp
  (install-pkg 'which-key)
  (require 'which-key)
  (which-key-mode)
  (setq which-key-idle-delay 0.8)
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
  (install-pkg 'nerd-icons)
  (require 'nerd-icons)
#+end_src

* Keybinding
** Setup General
#+begin_src emacs-lisp
  (install-pkg 'general)
  (require 'general)
  (general-evil-setup)
#+end_src

** The keybinding
*** Leader key
#+begin_src emacs-lisp
  (general-create-definer leaderkey :prefix "SPC")
#+end_src

*** Edit
#+begin_src emacs-lisp
  (general-def 'normal "g c" 'comment-line)
#+end_src

*** File
#+begin_src emacs-lisp
  (leaderkey
    :keymaps 'normal
    "f"   '(:ignore t :wk "File")
    "f e" '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/init.el"))
            :wk "Open config file")
    )
#+end_src

*** Buffers
#+begin_src emacs-lisp
  (leaderkey
    :keymaps 'normal
    "b"   '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    )
#+end_src

*** Evaluate
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "e"   '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e f" '(load-file :wk "Reload file")
    "e c" '((lambda () (interactive) (load-file "~/.config/emacs/init.el"))
            :wk "Reload config")
    )
#+end_src

*** Toggle
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "t"   '(:ignore t :wk "Toggle")
    "t n" '(display-line-numbers-mode :wk "Toggle number line")
    "t w" '(visual-line-mode :wk "Toggle line warp"))
#+end_src

*** Helpd
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "h"   '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h p" '(describe-package :wk "Describe package")
    )
#+end_src

*** Org Mode
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "o"   '(:ignore t :wk "Org")
    "o t" '(org-insert-structure-template :wk "Org insert template")
    )
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* UI
** Disable Bars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Number
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Line Warp
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

** Show Trailing Space
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
#+end_src

** Scroll Bemaviour
#+begin_src emacs-lisp
  ;;(setq scroll-margin 10
  ;;      scroll-step 1)
#+end_src

** Transparency
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(100 100))
  (add-to-list 'default-frame-alist '(alpha 100 100))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (install-pkg 'dashboard)
  ;; Use nerd icons
  (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
  (setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;; Config
  (setq dashboard-center-content t)

  ;; Enable Dashboard
  (require 'dashboard)
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))  ;; for emacs daemon
#+end_src

* Org Mode
** Tempo
Org-tempo allows for inserting '<s' followed by TAB to expand to begin_src block. Allowed triggers are:

| Trigger | Template     |
|---------+--------------|
| i       | index        |
| A       | ascii        |
| H       | html         |
| L       | latex        |
| v       | verse        |
| s       | src          |
| q       | quote        |
| l       | export-latex |
| h       | export-html  |
| E       | export       |
| e       | example      |
| C       | comment      |
| c       | center       |
| a       | export-ascii |
| I       | include      |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Header Icons
#+begin_src emacs-lisp
  (install-pkg 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (require 'org-bullets)
#+end_src

** Toc
#+begin_src emacs-lisp
  (install-pkg 'toc-org)
  (add-hook 'org-mode-hook 'toc-org-mode)
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

* Others
** Dont Create Backup file
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** Remove Trailing Space When Save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Smooth Scrolling and Centering Content
#+begin_src emacs-lisp
  (install-pkg 'sublimity)

  (require 'sublimity)
  (require 'sublimity-scroll)
  (require 'sublimity-attractive)
  ;; Setting the speed
  (setq sublimity-scroll-weight 10
        sublimity-scroll-drift-length 3)
  (setq sublimity-scroll-vertical-frame-delay 0.01)
  ;; Keep content on center
  (setq sublimity-attractive-centering-width 110)
  ;; Enable smooth scrolling
  (sublimity-mode 1)
#+end_src
