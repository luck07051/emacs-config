#+TITLE: Config File
#+AUTHOR: uima
#+DESCRIPTION: The emacs config file

* TOC :TOC:
- [[#package-manager][Package Manager]]
- [[#general][General]]
- [[#vertico][Vertico]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#marginalia][Marginalia]]
  - [[#savehist][Savehist]]
  - [[#hotfuzz][Hotfuzz]]
- [[#avy][Avy]]
- [[#keybinding][Keybinding]]
  - [[#define-leader-key][Define Leader key]]
  - [[#normal][Normal]]
  - [[#file][File]]
  - [[#buffer][Buffer]]
  - [[#toggle-ui][Toggle UI]]
- [[#theme][Theme]]
- [[#mode-line][Mode Line]]
- [[#ui][UI]]
  - [[#disable-gui-bars][Disable GUI Bars]]
  - [[#no-blink-cursor][No Blink Cursor]]
  - [[#line-warp][Line Warp]]
  - [[#show-trailing-space][Show Trailing Space]]
  - [[#default-window-size][Default Window Size]]
  - [[#transparency][Transparency]]
  - [[#centering-content][Centering Content]]
  - [[#show-parens][Show parens]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#misc][Misc]]
  - [[#which-key][Which Key]]
  - [[#helpful][Helpful]]
  - [[#dont-create-backup-file][Dont create backup file]]
  - [[#remove-trailing-space-when-save][Remove trailing space when save]]
  - [[#spell-checker][Spell checker]]
  - [[#scratch-message][Scratch message]]

* Package Manager
#+begin_src emacs-lisp
;; Set up package.el to work with MELPA
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (packae-refresh-contents))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src


* General
#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer my/leader-keys
    :prefix "M-SPC")
  (general-auto-unbind-keys))
#+end_src

* Vertico
The completion mechanism
#+begin_src emacs-lisp
(use-package vertico
  :custom
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  :config
  (vertico-mode)
  (vertico-reverse-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
(use-package consult
  :bind
  (("C-x C-b" . consult-buffer)
   ("C-c r" . consult-grep))
  )
#+end_src

** Embark
Minibuffer actions
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  )

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Marginalia
Marginalia in the minibuffer
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :config
  (marginalia-mode))
#+end_src

** Savehist
History plug for Vertico
#+begin_src emacs-lisp
(use-package savehist
  :after vertico
  :config
  (savehist-mode))
#+end_src

** Hotfuzz
Fuzzy search
#+begin_src emacs-lisp
(use-package hotfuzz
  :after vertico
  :custom
  (completion-styles '(hotfuzz))
  :config
  (require 'hotfuzz))
#+end_src

* Avy
Char-based jump
#+begin_src emacs-lisp
(use-package avy
  :bind
  (("C-:" . avy-goto-char-timer))
  )
#+end_src

* Keybinding
** Define Leader key
#+begin_src emacs-lisp
;; (kbd "<leader>rg") 'rgrep  ;; searching context
;; ;;(kbd "") 'next-error
;; ;;(kbd "") 'previous-error

;; (kbd "<leader>ec")
;; '(lambda () (interactive)
;;    (load-file "~/.config/emacs/init.el"))  ;; eval the config file
#+end_src

** Normal
#+begin_src emacs-lisp
(put 'suspend-frame 'disabled t) ;; disable C-z to suspend frame
(global-set-key (kbd "<escape>")    'keyboard-escape-quit)  ;; esc to quit prompts
(global-set-key (kbd "<next>")      'my/scroll-half-page-down)
(global-set-key (kbd "<prior>")     'my/scroll-half-page-up)
(global-set-key (kbd "<XF86Copy>")  'clipboard-kill-ring-save)
(global-set-key (kbd "<XF86Paste>") 'clipboard-yank)
(global-set-key (kbd "<XF86Cut>")   'clipboard-kill-region)
#+end_src

*** Scroll half page
#+begin_src emacs-lisp
(defun my/scroll-half-page-down ()
  "scroll down half a page while keeping the cursor centered"
  (interactive)
  (let ((ln (line-number-at-pos (point)))
    (lmax (line-number-at-pos (point-max))))
    (cond ((= ln 1) (move-to-window-line nil))
      ((= ln lmax) (recenter (window-end)))
      (t (progn
           (move-to-window-line -1)
           (recenter))))))

(defun my/scroll-half-page-up ()
  "scroll up half a page while keeping the cursor centered"
  (interactive)
  (let ((ln (line-number-at-pos (point)))
    (lmax (line-number-at-pos (point-max))))
    (cond ((= ln 1) nil)
      ((= ln lmax) (move-to-window-line nil))
      (t (progn
           (move-to-window-line 0)
           (recenter))))))
#+end_src

** File
#+begin_src emacs-lisp
(my/leader-keys
 "f"  '(:ignore t :which-key "files")
 "ff" 'find-file
 "fe" 'project-find-file
 "fp" 'project-switch-project
 "fr" 'recentf
 "fc" '(lambda () (interactive) (find-file "~/.config/emacs/config/config.org"))
 "fo" '(lambda () (interactive) (find-file "~/org/inbox.org"))
 "fm" 'make-directory
 "fd" 'delete-file
 )
#+end_src

** Buffer
#+begin_src emacs-lisp
(my/leader-keys
  "b"  '(:ignore t :which-key "buffers")
  "bi" 'ibuffer
  "bk" 'kill-this-buffer
  "bK" 'my/kill-other-buffers
  "br" 'revert-buffer
  )
#+end_src

*** Function of Kill other buffers
#+begin_src emacs-lisp
(defun my/kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (cdr (buffer-list (current-buffer)))))
#+end_src

** Toggle UI
#+begin_src emacs-lisp
(my/leader-keys
  "t"  '(:ignore t :which-key "toggles")
  "tn" 'display-line-numbers-mode
  "tw" 'visual-line-mode  ;; warp line
  "to" 'my/toggle-opacity
  )
#+end_src

*** Toggle Transparency
#+begin_src emacs-lisp
(defun my/toggle-opacity ()
  "Toggle transparency."
  (interactive)
  (pcase (frame-parameter nil 'alpha-background)
    (100 (set-frame-parameter nil 'alpha-background 90))
    (90  (set-frame-parameter nil 'alpha-background 50))
    (50  (set-frame-parameter nil 'alpha-background 100))))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

;; Custom colors
(set-foreground-color "#bcbcbc")
(set-background-color "#161616")
(add-to-list 'default-frame-alist '(foreground-color . "#bcbcbc"))
(add-to-list 'default-frame-alist '(background-color . "#161616"))
(custom-set-faces
 '(org-block-begin-line
   ((t (:background "#202020" :extend t))))
 '(org-block
   ((t (:background "#202020" :extend t))))
 '(org-block-end-line
   ((t (:background "#202020" :extend t))))
 '(org-link
   ((t (:foreground "#86a586" :extend t))))
 )
#+end_src

* Mode Line
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (doom-modeline-mode))
#+end_src

* UI
** Disable GUI Bars
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

** No Blink Cursor
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Line Warp
#+begin_src emacs-lisp
(global-visual-line-mode)
#+end_src

** Show Trailing Space
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
;; Disable in these modes
(dolist (hook '(special-mode-hook
                term-mode-hook
                comint-mode-hook
                compilation-mode-hook
                minibuffer-setup-hook))
  (add-hook hook (lambda () (setq show-trailing-whitespace nil))))
#+end_src

** Default Window Size
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(width . 110))
(add-to-list 'default-frame-alist '(height . 40))
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha '(100 100))
(set-frame-parameter nil 'alpha-background 90)
(add-to-list 'default-frame-alist '(alpha 100 100))
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Centering Content
#+begin_src emacs-lisp
(use-package visual-fill-column
  :custom
  (visual-fill-column-width 90)
  (visual-fill-column-center-text t)
  :config
  (global-visual-fill-column-mode 1))
#+end_src

** Show parens
#+begin_src emacs-lisp
(define-advice show-paren-function (:around (fn) fix)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
	(t (save-excursion
	     (ignore-errors (backward-up-list))
	     (funcall fn)))))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Misc
** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key)
  ([remap describe-command] . helpful-command)
  ("C-h h" . helpful-at-point))
#+end_src

** Dont create backup file
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

** Remove trailing space when save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Spell checker
#+begin_src emacs-lisp
(setq ispell-program-name "/usr/bin/aspell")
#+end_src

** Scratch message
#+begin_src emacs-lisp
(setq initial-scratch-message "")
#+end_src
