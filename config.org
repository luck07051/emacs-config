#+TITLE: Config File
#+AUTHOR: uima
#+DESCRIPTION: The emacs config file

* TOC                                                                   :TOC:
- [[#package-manager][Package Manager]]
- [[#install-important-plug][Install Important Plug]]
  - [[#evil-mode][Evil Mode]]
  - [[#vertico][Vertico]]
  - [[#which-key][Which Key]]
  - [[#nerd-icons][Nerd Icons]]
- [[#keybinding][Keybinding]]
  - [[#define-leader-key][Define Leader key]]
  - [[#normal][Normal]]
  - [[#file][File]]
  - [[#buffers][Buffers]]
  - [[#evaluate][Evaluate]]
  - [[#toggle][Toggle]]
  - [[#help][Help]]
  - [[#org-mode][Org Mode]]
  - [[#page-updown-to-scoll-half-of-page][Page Up/Down to Scoll half of page]]
- [[#theme][Theme]]
- [[#mode-line][Mode Line]]
- [[#ui][UI]]
  - [[#disable-bars][Disable Bars]]
  - [[#disable-blink-cursor][Disable Blink Cursor]]
  - [[#number][Number]]
  - [[#line-warp][Line Warp]]
  - [[#show-trailing-space][Show Trailing Space]]
  - [[#transparency][Transparency]]
  - [[#centering-content][Centering Content]]
  - [[#show-parens][Show parens]]
- [[#dashboard][Dashboard]]
- [[#org-mode-1][Org Mode]]
  - [[#agenda][Agenda]]
  - [[#tempo][Tempo]]
  - [[#time-stamp][Time Stamp]]
  - [[#insert-metadata][Insert Metadata]]
  - [[#indent][Indent]]
  - [[#toc][Toc]]
  - [[#show-hidden-element][Show Hidden Element]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#others][Others]]
  - [[#dont-create-backup-file][Dont Create Backup file]]
  - [[#remove-trailing-space-when-save][Remove Trailing Space When Save]]

* Package Manager
#+begin_src emacs-lisp
  ;; Set up package.el to work with MELPA
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  ;; Do not keep package up to date
#+end_src

* Install Important Plug
** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1))
#+end_src

*** Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Evil Snipe
2-char searching and repeated f/t
#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    (setq evil-snipe-scope 'visible))
#+end_src

** Vertico
The completion mechanism
#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode 1))
#+end_src

*** Savehist
History plug for Vertico
#+begin_src emacs-lisp
  (use-package savehist
    :after vertico
    :config
    (savehist-mode 1))
#+end_src

*** Hotfuzz
Fuzzy search
#+begin_src emacs-lisp
  (use-package hotfuzz
    :after vertico
    :init
    (setq completion-styles '(hotfuzz))
    :config
    (require 'hotfuzz))
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.8))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

* Keybinding
** Define Leader key
#+begin_src emacs-lisp
  (evil-set-leader nil (kbd "SPC"))
  (evil-set-leader nil (kbd ",") 1) ;; set local leader
#+end_src

** Normal
#+begin_src emacs-lisp
  (general-def 'normal "<XF86Copy>" 'clipboard-kill-ring-save)
  (general-def 'normal "<XF86Cut>" 'clipboard-kill-region)
  (general-def 'normal "<XF86Paste>" 'clipboard-kill-yank)

  (general-def 'normal ";" 'evil-search-forward)  ;; map ; /
  (general-def 'normal "g c" 'comment-line)
#+end_src

** File
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    ;;(kbd "<leader>f")  '(:ignore t :wk "File")
    (kbd "<leader>fe") 'find-file
    (kbd "<leader>fr") 'recentf
    (kbd "<leader>fc") '(lambda () (interactive) (find-file "~/.config/emacs/config.org"))
    )
#+end_src

** Buffers
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "<leader>bb") 'switch-to-buffer
    (kbd "<leader>bi") 'ibuffer
    (kbd "<leader>bk") 'kill-this-buffer
    (kbd "<leader>bn") 'next-buffer
    (kbd "<leader>bp") 'previous-buffer
    (kbd "<leader>br") 'revert-buffer
    )
#+end_src

** Evaluate
#+begin_src emacs-lisp
  (evil-define-key '(normal visual) 'global
    (kbd "<leader>eb") 'eval-buffer
    (kbd "<leader>ed") 'eval-defun
    (kbd "<leader>ee") 'eval-expression
    (kbd "<leader>el") 'eval-last-sexp
    (kbd "<leader>er") 'eval-region
    (kbd "<leader>ef") 'load-file
    (kbd "<leader>ec") '(lambda () (interactive) (load-file "~/.config/emacs/init.el"))
    )
#+end_src

** Toggle
#+begin_src emacs-lisp
  (evil-define-key '(normal visual) 'global
    (kbd "<leader>tn") 'display-line-numbers-mode
    (kbd "<leader>tw") 'visual-line-mode
    (kbd "<leader>tt") 'toggle-transparency
    )
#+end_src

*** Toggle Transparency
#+begin_src emacs-lisp
  (defun toggle-transparency ()
    "Toggle transparency."
    (interactive)
    (pcase (frame-parameter nil 'alpha-background)
      (100 (set-frame-parameter nil 'alpha-background 90))
      (90  (set-frame-parameter nil 'alpha-background 50))
      (50  (set-frame-parameter nil 'alpha-background 100))))
#+end_src

** Help
#+begin_src emacs-lisp
  (evil-define-key '(normal visual) 'global
    (kbd "<leader>hf") 'describe-function
    (kbd "<leader>hv") 'describe-variable
    (kbd "<leader>hp") 'describe-package
    )
#+end_src

** Org Mode
#+begin_src emacs-lisp
  (evil-define-key '(normal visual) 'global
    (kbd "<leader>ot") 'org-insert-structure-template
    (kbd "<leader>ol") 'counsel-org-link
    (kbd "<leader>om") 'org-header-skeleton
    )
#+end_src

** Page Up/Down to Scoll half of page
#+begin_src emacs-lisp
  (evil-define-key 'nil 'global
    (kbd "<next>") 'evil-scroll-down
    (kbd "<prior>") 'evil-scroll-up)
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  ;; Custom colors
  (set-foreground-color "#bcbcbc")
  (set-background-color "#161616")
  (add-to-list 'default-frame-alist '(foreground-color . "#bcbcbc"))
  (add-to-list 'default-frame-alist '(background-color . "#161616"))
  (custom-set-faces
   '(org-block-begin-line
     ((t (:background "#202020" :extend t))))
   '(org-block
     ((t (:background "#202020" :extend t))))
   '(org-block-end-line
     ((t (:background "#202020" :extend t))))
   )
#+end_src

* Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode 1))
#+end_src

* UI
** Disable Bars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Disable Blink Cursor
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src

** Number
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Line Warp
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

** Show Trailing Space
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
  ;; Disable in these modes
  (dolist (hook '(special-mode-hook
                  term-mode-hook
                  comint-mode-hook
                  compilation-mode-hook
                  minibuffer-setup-hook))
    (add-hook hook
              (lambda () (setq show-trailing-whitespace nil))))
#+end_src

** Transparency
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha '(100 100))
  (add-to-list 'default-frame-alist '(alpha 100 100))
  (set-frame-parameter nil 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Centering Content
#+begin_src emacs-lisp
  (use-package sublimity
  :config
  (require 'sublimity-attractive)
  ;; Keep content on center
  (setq sublimity-attractive-centering-width 110)
  ;; Enable smooth scrolling
  (sublimity-mode 1))
#+end_src

** Show parens
#+begin_src emacs-lisp
(define-advice show-paren-function (:around (fn) fix)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
        (t (save-excursion
             (ignore-errors (backward-up-list))
             (funcall fn)))))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    ;; Use nerd icons
    (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; Config
    (setq dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook)
    ;; for emacs daemon
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+end_src

* Org Mode
** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/notes"))
#+end_src

** Tempo
Org-tempo allows for inserting '<s' followed by TAB to expand to begin_src block.
Or use '<C-c><C-,>' keybind without tempo.

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** TODO Time Stamp
Automatically update a template
[[https://emacs.stackexchange.com/questions/64753/is-there-a-way-to-have-in-a-org-mode-file-a-placeholder-for-the-current-date-aut]]
[https://www.gnu.org/software/emacs/manual/html_node/autotype/Timestamps.html]
#+begin_src emacs-lisp
  ;;(add-hook 'before-save-hook #'time-stamp)
#+end_src

** Insert Metadata
*** Get Title
#+begin_src emacs-lisp
  (defun get-file-name-without-extension ()
    (file-name-sans-extension (file-name-nondirectory
                               (buffer-file-name (window-buffer (minibuffer-selected-window))))))
  (defun get-title-by-file-name ()
    (s-titleize
     (subst-char-in-string ?- (string-to-char " ") (get-file-name-without-extension))))
#+end_src

*** Skeleton
#+begin_src emacs-lisp
  (setq user-full-name "uima")

  (define-skeleton org-header-skeleton
    "Header info for an Org file."
    "Description: " "#+TITLE: " (get-title-by-file-name) "\n"
    "#+DESCRIPTION: " str "\n"
    "#+AUTHOR: " user-full-name "\n"
    "#+DATE: " (format-time-string "%Y-%m-%d") "\n"
    "#+UPDATED_DATE: " (format-time-string "%Y-%m-%d") "\n")
#+end_src

** Indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Toc
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** Show Hidden Element
#+begin_src emacs-lisp
  (use-package org-appear
    :init
    (setq org-appear-autolinks 1)
    (setq org-appear-trigger 'manual)
    (add-hook 'org-mode-hook 'org-appear-mode)
    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'evil-insert-state-entry-hook
                                         #'org-appear-manual-start
                                         nil
                                         t)
                               (add-hook 'evil-insert-state-exit-hook
                                         #'org-appear-manual-stop
                                         nil
                                         t))))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

* Others
** Dont Create Backup file
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** Remove Trailing Space When Save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
