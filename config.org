#+TITLE: Config File
#+AUTHOR: uima
#+DESCRIPTION: The emacs config file

* TOC                                                                   :TOC:
- [[#package-manager][Package Manager]]
- [[#install-important-plug][Install Important Plug]]
  - [[#evil-mode][Evil Mode]]
  - [[#vertico][Vertico]]
  - [[#projectile][Projectile]]
  - [[#which-key][Which Key]]
  - [[#nerd-icons][Nerd Icons]]
- [[#keybinding][Keybinding]]
  - [[#define-leader-key][Define Leader key]]
  - [[#special-keys][Special Keys]]
  - [[#normal][Normal]]
  - [[#file][File]]
  - [[#toggle-ui][Toggle UI]]
  - [[#org-mode][Org Mode]]
- [[#theme][Theme]]
- [[#mode-line][Mode Line]]
- [[#ui][UI]]
  - [[#disable-bars][Disable Bars]]
  - [[#disable-blink-cursor][Disable Blink Cursor]]
  - [[#number][Number]]
  - [[#line-warp][Line Warp]]
  - [[#show-trailing-space][Show Trailing Space]]
  - [[#window-size][Window Size]]
  - [[#transparency][Transparency]]
  - [[#centering-content][Centering Content]]
  - [[#show-parens][Show parens]]
- [[#dashboard][Dashboard]]
- [[#org-mode-1][Org Mode]]
  - [[#org-roam][Org Roam]]
  - [[#agenda][Agenda]]
  - [[#tags][Tags]]
  - [[#keyword][Keyword]]
  - [[#capture-templete][Capture Templete]]
  - [[#auto-insert-metadata][Auto Insert Metadata]]
  - [[#display-inline-images][Display Inline Images]]
  - [[#tempo][Tempo]]
  - [[#indent-mode][Indent Mode]]
  - [[#fix-wired-indent][Fix Wired Indent]]
  - [[#src-block][Src Block]]
  - [[#toc][Toc]]
  - [[#hide-elements][Hide Elements]]
  - [[#show-hidden-element][Show Hidden Element]]
  - [[#babel][Babel]]
  - [[#insert-links-with-title][Insert Links with Title]]
  - [[#export][Export]]
  - [[#archive-doned-to-do-list][Archive Doned To-do list]]
  - [[#automatically-done-when-all-children-are-done][Automatically DONE When All Children Are Done]]
- [[#others][Others]]
  - [[#dont-create-backup-file][Dont Create Backup file]]
  - [[#remove-trailing-space-when-save][Remove Trailing Space When Save]]
  - [[#spell-checker][Spell checker]]

* Package Manager
#+begin_src emacs-lisp
;; Set up package.el to work with MELPA
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(package-refresh-contents)

(require 'use-package-ensure)
(setq use-package-always-ensure t)
;; Do not keep package up to date
#+end_src

* Install Important Plug
** Evil Mode
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (evil-mode 1))
#+end_src

*** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

*** Evil Snipe
2-char searching and repeated f/t
#+begin_src emacs-lisp
(use-package evil-snipe
  :after evil
  :config
  (evil-snipe-mode 1)
  (evil-snipe-override-mode 1)
  (setq evil-snipe-scope 'visible))
#+end_src

*** Evil Surround
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

** Vertico
The completion mechanism
#+begin_src emacs-lisp
(use-package vertico
  :init
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)
  :config
  (vertico-mode 1))
#+end_src

*** Savehist
History plug for Vertico
#+begin_src emacs-lisp
(use-package savehist
  :after vertico
  :config
  (savehist-mode 1))
#+end_src

*** Hotfuzz
Fuzzy search
#+begin_src emacs-lisp
(use-package hotfuzz
  :after vertico
  :init
  (setq completion-styles '(hotfuzz))
  :config
  (require 'hotfuzz))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.8))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons)
#+end_src

* Keybinding
** Define Leader key
#+begin_src emacs-lisp
(evil-set-leader nil (kbd "SPC"))
(evil-set-leader nil (kbd ",") 1) ;; set local leader
#+end_src

** Special Keys
#+begin_src emacs-lisp
(evil-define-key nil 'global
  (kbd "<next>") 'evil-scroll-down
  (kbd "<prior>") 'evil-scroll-up
  (kbd "<XF86Copy>") 'evil-yank
  (kbd "<XF86Cut>") 'evil-delete
  (kbd "<XF86Paste>") 'evil-paste-before)
#+end_src

** Normal
#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "Y") "y$"  ;; fixing Y

  (kbd "<leader>rg") 'rgrep  ;; searching context
  ;;(kbd "") 'next-error
  ;;(kbd "") 'previous-error

  (kbd "<backspace>") 'evil-buffer  ;; alternate file
  (kbd ";") 'projectile-find-file  ;; find file

  (kbd "gc") 'comment-line  ;; comment out the line

  (kbd "<leader>ec") '(lambda () (interactive) (load-file "~/.config/emacs/init.el"))  ;; eval the config file

  (kbd "<leader>bb") 'switch-to-buffer
  (kbd "<leader>bi") 'ibuffer
  (kbd "<leader>bk") 'kill-this-buffer
  (kbd "<leader>bK") 'kill-other-buffer
  (kbd "<leader>br") 'revert-buffer
  )

(evil-define-key 'visual 'global
  (kbd "<leader>sh") 'shell-command-on-region  ;; execute a cmd on selection

  (kbd "gc") 'comment-region  ;; comment out the region

  (kbd "<leader>er") 'eval-region  ;; eval the selection
  )
#+end_src

*** Kill other buffer
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
    (mapc 'kill-buffer (cdr (buffer-list (current-buffer)))))
#+end_src

** File
#+begin_src emacs-lisp
(evil-define-key 'normal 'global
  (kbd "<leader>ff") 'find-file
  (kbd "<leader>fe") 'projectile-find-file
  (kbd "<leader>fp") 'projectile-switch-project
  (kbd "<leader>fi") 'projectile-add-known-project
  (kbd "<leader>fr") 'recentf
  (kbd "<leader>fc") '(lambda () (interactive) (find-file "~/.config/emacs/config.org"))
  (kbd "<leader>fo") '(lambda () (interactive) (find-file "~/org/inbox.org"))

  (kbd "<leader>fm") 'make-directory
  (kbd "<leader>fd") 'delete-file
  )
#+end_src

** Toggle UI
#+begin_src emacs-lisp
(evil-define-key '(normal visual) 'global
  (kbd "<leader>tn") 'display-line-numbers-mode
  (kbd "<leader>tw") 'visual-line-mode  ;; warp line
  (kbd "<leader>tt") 'toggle-transparency
  )
#+end_src

*** Toggle Transparency
#+begin_src emacs-lisp
(defun toggle-transparency ()
  "Toggle transparency."
  (interactive)
  (pcase (frame-parameter nil 'alpha-background)
    (100 (set-frame-parameter nil 'alpha-background 90))
    (90  (set-frame-parameter nil 'alpha-background 50))
    (50  (set-frame-parameter nil 'alpha-background 100))))
#+end_src

** Org Mode
#+begin_src emacs-lisp
(evil-define-key '(normal visual) org-mode-map
  (kbd "<leader>om") 'org-header-skeleton  ;; insert metadata
  (kbd "<leader>oi") 'org-toggle-inline-images
  )

(evil-define-key nil 'global
  (kbd "C-c l")      'org-store-link
  (kbd "C-c i")      'org-cliplink  ;; paste link with title
  (kbd "C-c a")      'org-agenda
  (kbd "C-c c")      'org-capture
  (kbd "C-c s")      'org-edit-src-code
  )
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

;; Custom colors
(set-foreground-color "#bcbcbc")
(set-background-color "#161616")
(add-to-list 'default-frame-alist '(foreground-color . "#bcbcbc"))
(add-to-list 'default-frame-alist '(background-color . "#161616"))
(custom-set-faces
 '(org-block-begin-line
   ((t (:background "#202020" :extend t))))
 '(org-block
   ((t (:background "#202020" :extend t))))
 '(org-block-end-line
   ((t (:background "#202020" :extend t))))
 '(org-link
   ((t (:foreground "#86a586" :extend t))))
 )
#+end_src

* Mode Line
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (doom-modeline-mode 1))
#+end_src

* UI
** Disable Bars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Disable Blink Cursor
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Number
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
#+end_src

** Line Warp
#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src

** Show Trailing Space
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
;; Disable in these modes
(dolist (hook '(special-mode-hook
		term-mode-hook
		comint-mode-hook
		compilation-mode-hook
		minibuffer-setup-hook))
  (add-hook hook
	    (lambda () (setq show-trailing-whitespace nil))))
#+end_src

** Window Size
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(width . 110))
(add-to-list 'default-frame-alist '(height . 40))
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))
(set-frame-parameter nil 'alpha-background 90)
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Centering Content
#+begin_src emacs-lisp
(use-package sublimity
  :config
  (require 'sublimity-attractive)
  ;; Keep content on center
  (setq sublimity-attractive-centering-width 90)
  ;; Enable smooth scrolling
  (sublimity-mode 1))
#+end_src

** Show parens
#+begin_src emacs-lisp
(define-advice show-paren-function (:around (fn) fix)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
	(t (save-excursion
	     (ignore-errors (backward-up-list))
	     (funcall fn)))))
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init
  ;; Use nerd icons
  (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
  (setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;; Config
  (setq dashboard-center-content t)
  :config
  (dashboard-setup-startup-hook)
  ;; for emacs daemon
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+end_src

* Org Mode
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory (file-truename "~/org"))
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template
   (concat "${title:*} " (propertize "${tags:15}" 'face 'org-tag)))
  (org-roam-capture-templates
   '(("d" "default" plain "\n%?"
      :target (file+head
               "%<%Y%m%d%H%M%S>-${slug}.org"
               "#+title: ${title}\n#+data: %U\n#+filetags:\n")
      :unnarrowed t)
     ))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         :map org-mode-map
         ("C-M-i"   . completion-at-point))
  :config
  (org-roam-setup))
#+end_src

** Agenda
#+begin_src emacs-lisp
;;(setq org-agenda-files '("~/org"))
(setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
#+end_src

** Tags
#+begin_src emacs-lisp
(setq org-tag-alist '(
                      (:startgroup . nil)
                      (:endgroup . nil)
                      ))

(setq org-tag-faces
      '(
        ;;("meeting"   . (:foreground "yellow1"       :weight bold))
        ))
#+end_src

** Todo Keyword
#+begin_src emacs-lisp
(setq org-todo-keywords
      ;;'((sequence "TODO" "WAITING" "|" "DONE")))
      '((sequence "TODO(t)" "IN-PROGRESS(i!)" "WAITING(w@)" "|" "DONE(d)")))

(setq org-log-done 'time)

(setq org-todo-keyword-faces
      '(
        ("TODO"        . (:foreground "GoldenRod"  :weight bold))
        ("IN-PROGRESS" . (:foreground "Cyan"       :weight bold))
        ("WAITING"     . (:foreground "DarkOrange" :weight bold))
        ("DONE"        . (:foreground "LimeGreen"  :weight bold))
        ))
#+end_src

** Capture Templete
#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("n" "Add Note to Inbox"
         entry (file "~/org/inbox.org")
         "* %?"
         :empty-lines-before 1)
        ("t" "Add Todo to Inbox"
         entry (file "~/org/inbox.org")
         "* TODO [#B] %?\n:CREATED: %T\n"
         :empty-lines-before 1)
        ("l" "Cap with Link")
        ("ln" "Add Note with File Link to Inbox"
         entry (file "~/org/inbox.org")
         "* %?\n%a\n"
         :empty-lines-before 1)
        ("lt" "Add Todo with File Link to Inbox"
         entry (file "~/org/inbox.org")
         "* TODO [#B] %?\n:CREATED: %T\n%a\n"
         :empty-lines-before 1)
        ))
#+end_src

** Auto Insert Metadata
*** Auto Insert
#+begin_src emacs-lisp
;; (auto-insert-mode t)
;;
;; (setq user-full-name "uima")
;; (add-to-list 'auto-insert-alist
;;              '(("\\.\\org\\'" . "Auto insert metadata for org.")
;;                "" "#+TITLE: " (get-title-by-file-name) "\n"
;;                "#+AUTHOR: " user-full-name "\n"
;;                "#+DATE: " (format-time-string "%Y-%m-%d") "\n")
;;              )
#+end_src

*** Get Title Function
#+begin_src emacs-lisp
(defun get-file-name-without-extension ()
  (file-name-sans-extension
   (file-name-nondirectory
    (buffer-file-name
     (window-buffer
      (minibuffer-selected-window))))))
(defun get-title-by-file-name ()
  (s-titleize
   (subst-char-in-string
    ?- (string-to-char " ") (get-file-name-without-extension))))
#+end_src

** Display Inline Images
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

** Tempo
Org-tempo allows for inserting '<s' followed by TAB to expand to begin_src block.
Or use '<C-c><C-,>' keybind without tempo.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Indent Mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Fix Wired Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-src-preserve-indentation t)  ;; do not put two spaces on the left
#+end_src

** Src Block
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

** Toc
#+begin_src emacs-lisp
(use-package toc-org :hook (org-mode . toc-org-mode))
#+end_src

** Hide Elements
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** Show Hidden Element
#+begin_src emacs-lisp
(use-package org-appear
  :init
  (setq org-appear-autolinks 1)
  (setq org-appear-trigger 'manual)
  (add-hook 'org-mode-hook 'org-appear-mode)
  (add-hook 'org-mode-hook (lambda ()
			     (add-hook 'evil-insert-state-entry-hook
				       #'org-appear-manual-start
				       nil
				       t)
			     (add-hook 'evil-insert-state-exit-hook
				       #'org-appear-manual-stop
				       nil
				       t))))
#+end_src

** Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (emacs-lisp . t)
   (shell . t)
   (python . t)
   (awk . t)
   (C . t)
   ))
#+end_src

** Insert Links with Title
#+begin_src emacs-lisp
(use-package org-cliplink)
#+end_src

** TODO Export
[[https://search.uima.duckdns.org/search?q=emacs%20org%20mode%20export%20unable%20resolve%20link&language=auto&time_range=&safesearch=0&categories=general][searching]]

** TODO Archive Doned To-do list
A key press to move doned item to, say `archive.org` file.

** TODO Automatically DONE When All Children Are Done
[[https://orgmode.org/manual/Breaking-Down-Tasks.html#Breaking-Down-Tasks][manual for this]]

* Others
** Dont Create Backup file
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

** Remove Trailing Space When Save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Spell checker
#+begin_src emacs-lisp
(setq ispell-program-name "/usr/bin/aspell")
#+end_src
