#+TITLE: Config File
#+AUTHOR: uima
#+DESCRIPTION: The emacs config file

* TOC                                                                   :TOC:
- [[#package-manager][Package Manager]]
- [[#install-important-plug][Install Important Plug]]
  - [[#evil-mode][Evil Mode]]
  - [[#vertico][Vertico]]
  - [[#which-key][Which Key]]
  - [[#nerd-icons][Nerd Icons]]
- [[#keybinding][Keybinding]]
  - [[#setup-general][Setup General]]
  - [[#the-keybinding][The keybinding]]
- [[#theme][Theme]]
- [[#mode-line][Mode Line]]
- [[#ui][UI]]
  - [[#disable-bars][Disable Bars]]
  - [[#disable-blink-cursor][Disable Blink Cursor]]
  - [[#number][Number]]
  - [[#line-warp][Line Warp]]
  - [[#show-trailing-space][Show Trailing Space]]
  - [[#transparency][Transparency]]
  - [[#centering-content][Centering Content]]
  - [[#show-parens][Show parens]]
- [[#dashboard][Dashboard]]
- [[#org-mode][Org Mode]]
  - [[#agenda][Agenda]]
  - [[#tempo][Tempo]]
  - [[#time-stamp][Time Stamp]]
  - [[#insert-metadata][Insert Metadata]]
  - [[#indent][Indent]]
  - [[#toc][Toc]]
  - [[#show-hidden-element][Show Hidden Element]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#others][Others]]
  - [[#dont-create-backup-file][Dont Create Backup file]]
  - [[#remove-trailing-space-when-save][Remove Trailing Space When Save]]

* Package Manager
#+begin_src emacs-lisp
  ;; Set up package.el to work with MELPA
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
#+end_src

* Install Important Plug
** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1))
#+end_src

*** Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

*** Evil Snipe
2-char searching and repeated f/t
#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :ensure t
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    (setq evil-snipe-scope 'visible))
#+end_src

** Vertico
The completion mechanism
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode 1))
#+end_src

*** Savehist
History plug for Vertico
#+begin_src emacs-lisp
  (use-package savehist
    :after vertico
    :ensure t
    :config
    (savehist-mode 1))
#+end_src

*** Hotfuzz
Fuzzy search
#+begin_src emacs-lisp
  (use-package hotfuzz
    :after vertico
    :ensure t
    :init
    (setq completion-styles '(hotfuzz))
    :config
    (require 'hotfuzz))
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.8))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t)
#+end_src

* Keybinding
** Setup General
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup))
#+end_src

** The keybinding
*** Leader key
#+begin_src emacs-lisp
  (general-create-definer leaderkey :prefix "SPC")
#+end_src

*** Normal
#+begin_src emacs-lisp
  (general-def 'normal "<XF86Copy>" 'clipboard-kill-ring-save)
  (general-def 'normal "<XF86Cut>" 'clipboard-kill-region)
  (general-def 'normal "<XF86Paste>" 'clipboard-kill-yank)

  (general-def 'normal ";" 'evil-search-forward)  ;; map ; /
  (general-def 'normal "g c" 'comment-line)
#+end_src

*** File
#+begin_src emacs-lisp
  (leaderkey
    :keymaps 'normal
    "f"   '(:ignore t :wk "File")
    "f e" '(find-file :wk "Find file")
    "f r" '(recentf :wk "Find recent file")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org"))
            :wk "Open config file")
    )
#+end_src

*** Buffers
#+begin_src emacs-lisp
  (leaderkey
    :keymaps 'normal
    "b"   '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    )
#+end_src

*** Evaluate
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "e"   '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e f" '(load-file :wk "Reload file")
    "e c" '((lambda () (interactive) (load-file "~/.config/emacs/init.el"))
            :wk "Reload config")
    )
#+end_src

*** Toggle
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "t"   '(:ignore t :wk "Toggle")
    "t n" '(display-line-numbers-mode :wk "Toggle number line")
    "t w" '(visual-line-mode :wk "Toggle line warp"))
#+end_src

*** Helpd
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "h"   '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h p" '(describe-package :wk "Describe package")
    )
#+end_src

*** Org Mode
#+begin_src emacs-lisp
  (leaderkey
    :keymaps '(normal visual)
    "o"   '(:ignore t :wk "Org")
    "o t" '(org-insert-structure-template :wk "Org insert template")
    "o l" '(counsel-org-link :wk "Org insert link")
    "o m" '(org-header-skeleton :wk "Org insert metadata")
    )
#+end_src

*** Page Up/Down to Scoll half of page
#+begin_src emacs-lisp
  (defun my/scroll-down-half-page ()
    "scroll down half a page while keeping the cursor centered"
    (interactive)
    (let ((ln (line-number-at-pos (point)))
          (lmax (line-number-at-pos (point-max))))
      (cond ((= ln 1) (move-to-window-line nil))
            ((= ln lmax) (recenter (window-end)))
            (t (progn
                 (move-to-window-line -1)
                 (recenter))))))

  (defun my/scroll-up-half-page ()
    "scroll up half a page while keeping the cursor centered"
    (interactive)
    (let ((ln (line-number-at-pos (point)))
          (lmax (line-number-at-pos (point-max))))
      (cond ((= ln 1) nil)
            ((= ln lmax) (move-to-window-line nil))
            (t (progn
                 (move-to-window-line 0)
                 (recenter))))))

  (general-def 'normal "<next>" 'my/scroll-down-half-page)
  (general-def 'normal "<prior>" 'my/scroll-up-half-page)
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 1))
#+end_src

* UI
** Disable Bars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Disable Blink Cursor
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src

** Number
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Line Warp
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

** Show Trailing Space
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
  ;; Disable in these modes
  (dolist (hook '(special-mode-hook
                  term-mode-hook
                  comint-mode-hook
                  compilation-mode-hook
                  minibuffer-setup-hook))
    (add-hook hook
              (lambda () (setq show-trailing-whitespace nil))))
#+end_src

** Transparency
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(100 100))
  (add-to-list 'default-frame-alist '(alpha 100 100))
#+end_src

** Centering Content
#+begin_src emacs-lisp
  (use-package sublimity
  :ensure t
  :config
  (require 'sublimity-attractive)
  ;; Keep content on center
  (setq sublimity-attractive-centering-width 110)
  ;; Enable smooth scrolling
  (sublimity-mode 1))
#+end_src

** Show parens
#+begin_src emacs-lisp
(define-advice show-paren-function (:around (fn) fix)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
        (t (save-excursion
             (ignore-errors (backward-up-list))
             (funcall fn)))))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    ;; Use nerd icons
    (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; Config
    (setq dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook)
    ;; for emacs daemon
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+end_src

* Org Mode
** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/notes"))
#+end_src

** Tempo
Org-tempo allows for inserting '<s' followed by TAB to expand to begin_src block.
Or use '<C-c><C-,>' keybind without tempo.

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** TODO Time Stamp
Automatically update a template
[[https://emacs.stackexchange.com/questions/64753/is-there-a-way-to-have-in-a-org-mode-file-a-placeholder-for-the-current-date-aut]]
[https://www.gnu.org/software/emacs/manual/html_node/autotype/Timestamps.html]
#+begin_src emacs-lisp
  ;;(add-hook 'before-save-hook #'time-stamp)
#+end_src

** Insert Metadata
*** Get Title
#+begin_src emacs-lisp
  (defun get-file-name-without-extension ()
    (file-name-sans-extension (file-name-nondirectory
                               (buffer-file-name (window-buffer (minibuffer-selected-window))))))
  (defun get-title-by-file-name ()
    (s-titleize
     (subst-char-in-string ?- (string-to-char " ") (get-file-name-without-extension))))
#+end_src

*** Skeleton
#+begin_src emacs-lisp
  (setq user-full-name "uima")

  (define-skeleton org-header-skeleton
    "Header info for an Org file."
    "Description: " "#+TITLE: " (get-title-by-file-name) "\n"
    "#+DESCRIPTION: " str "\n"
    "#+AUTHOR: " user-full-name "\n"
    "#+DATE: " (format-time-string "%Y-%m-%d") "\n"
    "#+UPDATED_DATE: " (format-time-string "%Y-%m-%d") "\n")
#+end_src

** Indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Toc
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . toc-org-mode))
#+end_src

** Show Hidden Element
#+begin_src emacs-lisp
  (use-package org-appear
    :ensure t
    :init
    (setq org-appear-autolinks 1)
    (setq org-appear-trigger 'manual)
    (add-hook 'org-mode-hook 'org-appear-mode)
    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'evil-insert-state-entry-hook
                                         #'org-appear-manual-start
                                         nil
                                         t)
                               (add-hook 'evil-insert-state-exit-hook
                                         #'org-appear-manual-stop
                                         nil
                                         t))))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

* Others
** Dont Create Backup file
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** Remove Trailing Space When Save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
